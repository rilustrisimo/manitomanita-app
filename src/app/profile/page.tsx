"use client";

import { useEffect, useMemo, useRef, useState } from "react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import Footer from "@/components/footer";
import ProfileAvatar from "@/components/profile-avatar";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { createSupabaseBrowserClient } from "@/lib/supabase/client";
import { uploadProfileImage, deleteProfileImage, updateUserProfileImage, cleanupOldProfileImages } from "@/lib/profile-image";
import { resizeAndCompressImage, isValidImageFile, formatFileSize } from "@/lib/image-processing";
import { useRouter } from "next/navigation";
import { useToast } from "@/hooks/use-toast";
import { Upload, Trash2, LogIn } from "lucide-react";
import { LoadingOverlay, LoadingSpinner } from "@/components/ui/loading";
import { useAuth } from "@/lib/auth-context";
import { AuthGuard } from "@/components/auth-guard";
import { getCurrentUser, getSessionToken } from "@/app/actions/auth";

interface UserProfile {
  id: string;
  user_id: string;
  display_name: string;
  phone?: string;
  contact_details?: string;
  profile_image_url?: string | null;
  email: string; // from auth user
}

export default function ProfilePage() {
  return (
    <AuthGuard 
      loadingMessage="Loading your profile..."
      loginMessage="Please log in"
      loginDescription="Sign in to access your profile and manage your account settings."
    >
      <ProfilePageContent />
    </AuthGuard>
  );
}

function ProfilePageContent() {
  const { user: authUser } = useAuth();
  const [user, setUser] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [uploadingImage, setUploadingImage] = useState(false);
  const [mounted, setMounted] = useState(false);
  const didStartRef = useRef(false);
  const router = useRouter();
  const { toast } = useToast();
  const supabase = useMemo(() => createSupabaseBrowserClient(), []);

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    let isMounted = true;
    let timeoutId: ReturnType<typeof setTimeout> | null = null;

    async function loadProfile() {
      if (didStartRef.current || !isMounted) return;
      didStartRef.current = true;

      try {
        // 1) Try client session first
        const { data: { session } } = await supabase.auth.getSession();
        if (!isMounted) return;

        if (session?.user) {
          // Use auth user data directly, don't rely on user_profiles table
          const authUser = session.user;
          
          // Try to get profile from account_profiles table
          const { data: profile, error } = await supabase
            .from('account_profiles')
            .select('*')
            .eq('user_id', authUser.id)
            .maybeSingle(); // Use maybeSingle instead of single to handle missing records
          
          if (!isMounted) return;
          
          if (error && error.code !== 'PGRST116') {
            // Only error if it's not a "no rows" error
            console.error('Profile fetch error:', error);
            toast({ variant: 'destructive', title: 'Error', description: 'Failed to load profile' });
            setLoading(false);
            return;
          }
          
          // If profile exists, use it; otherwise create from auth user
          if (profile) {
            setUser({
              id: (profile as any).id,
              user_id: (profile as any).user_id,
              display_name: (profile as any).display_name,
              phone: (profile as any).phone,
              contact_details: (profile as any).contact_details,
              profile_image_url: (profile as any).profile_image_url,
              email: authUser.email || ''
            } as UserProfile);
          } else {
            // Create profile from auth user data
            const userProfile: UserProfile = {
              id: '', // Will be generated by DB
              user_id: authUser.id,
              email: authUser.email || '',
              display_name: authUser.user_metadata?.full_name || authUser.email?.split('@')[0] || 'User',
              phone: authUser.user_metadata?.phone || undefined,
              contact_details: undefined,
              profile_image_url: authUser.user_metadata?.avatar_url || null
            };
            
            // Try to create the profile in the database
            try {
              const { data: newProfile, error: insertError } = await (supabase as any)
                .from('account_profiles')
                .insert([{
                  user_id: userProfile.user_id,
                  display_name: userProfile.display_name,
                  phone: userProfile.phone,
                  contact_details: userProfile.contact_details,
                  profile_image_url: userProfile.profile_image_url
                }])
                .select()
                .single();
              
              if (insertError) {
                console.warn('Could not create profile in database:', insertError);
                // Continue with the profile data even if DB insert fails
                setUser(userProfile);
              } else {
                setUser({
                  ...newProfile,
                  email: authUser.email || ''
                } as UserProfile);
              }
            } catch (insertErr) {
              console.warn('Profile creation failed:', insertErr);
              // Continue with the profile data even if DB insert fails
              setUser(userProfile);
            }
          }
          setLoading(false);
          return;
        }

        // 2) Fallback to server session (SSO cookie)
        try {
          const [serverUser, token] = await Promise.all([
            getCurrentUser(),
            getSessionToken(),
          ]);
          if (!isMounted) return;
          if (serverUser?.user && token) {
            // Use auth user data directly
            const authUser = serverUser.user;
            const userProfile: UserProfile = {
              id: '', // Will be generated by DB
              user_id: authUser.id,
              email: authUser.email || '',
              display_name: authUser.user_metadata?.full_name || authUser.email?.split('@')[0] || 'User',
              phone: authUser.user_metadata?.phone,
              contact_details: undefined,
              profile_image_url: authUser.user_metadata?.avatar_url || null
            };
            setUser(userProfile);
            setLoading(false);
            return;
          }
        } catch (serverErr) {
          console.error('Server-side session check failed:', serverErr);
        }

        // 3) If no session at all, send to login
        router.push('/login');
      } catch (err) {
        console.error('Load profile error:', err);
        toast({ variant: 'destructive', title: 'Error', description: 'Failed to load profile' });
      } finally {
        if (isMounted) setLoading(false);
      }
    }

    if (mounted) {
      // Safety net timeout to avoid indefinite loading
      timeoutId = setTimeout(() => {
        if (isMounted) setLoading(false);
      }, 8000);
      loadProfile();
    }

    return () => {
      isMounted = false;
      if (timeoutId) clearTimeout(timeoutId);
    };
  }, [mounted, supabase, router, toast]);

  const handleSave = async (formData: FormData) => {
    if (!user) return;
    
    setSaving(true);
    try {
      const displayName = String(formData.get('display-name'));
      const phone = String(formData.get('phone'));
      const contactDetails = String(formData.get('contact-details'));

      const { error } = await (supabase as any)
        .from('account_profiles')
        .update({
          display_name: displayName,
          phone: phone || null,
          contact_details: contactDetails || null
        })
        .eq('user_id', user.user_id);

      if (error) throw error;

      setUser({ ...user, display_name: displayName, phone: phone, contact_details: contactDetails });
      toast({ title: 'Success', description: 'Profile updated successfully' });
    } catch (error) {
      console.error('Save error:', error);
      toast({ variant: 'destructive', title: 'Error', description: 'Failed to save profile' });
    } finally {
      setSaving(false);
    }
  };

  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!user || !event.target.files?.[0]) return;

    const file = event.target.files[0];
    
    // Validate file type using utility function
    if (!isValidImageFile(file)) {
      toast({ variant: 'destructive', title: 'Error', description: 'Please select a valid image file (JPEG, PNG, WebP, GIF)' });
      return;
    }

    // Note: We'll check size after compression, but give user feedback about original size
    if (file.size > 10 * 1024 * 1024) { // 10MB limit for original file
      toast({ variant: 'destructive', title: 'Error', description: 'Original image is too large. Please select an image smaller than 10MB.' });
      return;
    }

    setUploadingImage(true);
    try {
      // Show processing message
      toast({ title: 'Processing', description: 'Resizing and compressing image...' });

      // Resize and compress the image to 100px width with auto-scaling height
      const compressedFile = await resizeAndCompressImage(file, 100, 0.8);
      
      // Validate compressed file size (should be much smaller now)
      if (compressedFile.size > 1 * 1024 * 1024) {
        toast({ 
          variant: 'destructive', 
          title: 'Error', 
          description: 'Compressed image is still too large. Please try a different image.' 
        });
        return;
      }

      // Delete old image if exists
      if (user.profile_image_url) {
        try {
          await deleteProfileImage(user.profile_image_url);
        } catch (deleteError) {
          console.warn('Failed to delete old image from storage:', deleteError);
          // Continue with upload even if old image deletion fails
        }
      }

      // Upload the compressed image
      const imagePath = await uploadProfileImage(user.user_id, compressedFile);
      
      // Update database
      await updateUserProfileImage(user.user_id, imagePath);
      
      // Clean up any old images (async, don't wait for completion)
      cleanupOldProfileImages(user.user_id, imagePath).catch(console.warn);
      
      // Update local state
      setUser({ ...user, profile_image_url: imagePath });
      
      toast({ 
        title: 'Success', 
        description: `Profile image uploaded successfully! Compressed to ${formatFileSize(compressedFile.size)}` 
      });
    } catch (error) {
      console.error('Upload error:', error);
      toast({ variant: 'destructive', title: 'Error', description: 'Failed to upload image' });
    } finally {
      setUploadingImage(false);
    }
  };

  const handleImageDelete = async () => {
    if (!user || !user.profile_image_url) return;

    setUploadingImage(true);
    try {
      // Delete from storage first
      try {
        await deleteProfileImage(user.profile_image_url);
        console.log('Successfully deleted image from storage:', user.profile_image_url);
      } catch (storageError) {
        console.error('Failed to delete from storage:', storageError);
        // Continue to update database even if storage deletion fails
        toast({ 
          title: 'Warning', 
          description: 'Image removed from profile but may still exist in storage. Contact support if needed.',
          variant: 'destructive'
        });
      }
      
      // Update database to remove image reference
      await updateUserProfileImage(user.user_id, null);
      
      // Update local state
      setUser({ ...user, profile_image_url: null });
      
      toast({ title: 'Success', description: 'Profile image removed successfully' });
    } catch (error) {
      console.error('Delete error:', error);
      toast({ variant: 'destructive', title: 'Error', description: 'Failed to remove image from profile' });
    } finally {
      setUploadingImage(false);
    }
  };

  if (loading) {
    return (
      <div className="flex flex-col min-h-screen bg-background text-foreground">
        
        <main className="flex-1 pt-24 flex items-center justify-center">
          <div>Loading profile...</div>
        </main>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="flex flex-col min-h-screen bg-background text-foreground">
        
        <main className="flex-1 pt-24 flex items-center justify-center">
          <div>Profile not found</div>
        </main>
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen bg-background text-foreground">
      {/* Header */}
      

      <main className="flex-1 pt-24">
        <div className="container mx-auto max-w-2xl px-4 py-8">
          <Card>
            <CardHeader>
              <CardTitle className="font-headline text-2xl">Your Profile</CardTitle>
              <CardDescription>View and edit your personal information.</CardDescription>
            </CardHeader>
            <CardContent>
              <form action={handleSave} className="space-y-6">
                <div className="flex items-center gap-4">
                  <ProfileAvatar
                    userId={user.user_id}
                    profileImagePath={user.profile_image_url}
                    displayName={user.display_name}
                    className="h-20 w-20"
                  />
                  <div className="flex flex-col gap-2">
                    <div className="flex gap-2">
                      <input
                        type="file"
                        accept="image/*"
                        onChange={handleImageUpload}
                        disabled={uploadingImage}
                        className="hidden"
                        id="profile-image-upload"
                      />
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        disabled={uploadingImage}
                        onClick={() => document.getElementById('profile-image-upload')?.click()}
                        className="relative"
                      >
                        {uploadingImage ? (
                          <>
                            <LoadingSpinner size="sm" className="mr-2" />
                            Processing Image...
                          </>
                        ) : (
                          <>
                            <Upload className="mr-2 h-4 w-4" />
                            Upload Image
                          </>
                        )}
                      </Button>
                      {user.profile_image_url && (
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          disabled={uploadingImage}
                          onClick={handleImageDelete}
                        >
                          <Trash2 className="mr-2 h-4 w-4" />
                          Remove
                        </Button>
                      )}
                    </div>
                    <div className="text-sm text-muted-foreground">
                      {user.profile_image_url 
                        ? 'You can upload a new image (will be resized to 100px width) or remove the current one'
                        : 'Upload a profile image (will be automatically resized to 100px width) or initials will be used'
                      }
                    </div>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="display-name">Display Name</Label>
                  <Input 
                    id="display-name" 
                    name="display-name" 
                    defaultValue={user.display_name} 
                    placeholder="Your display name"
                    required 
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input 
                    id="email" 
                    type="email" 
                    value={user.email} 
                    disabled 
                    className="bg-muted"
                  />
                  <p className="text-xs text-muted-foreground">
                    Email cannot be changed. Contact support if needed.
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phone">Phone (Optional)</Label>
                  <Input 
                    id="phone" 
                    name="phone" 
                    type="tel"
                    defaultValue={user.phone || ''} 
                    placeholder="Your phone number"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="contact-details">Contact Details (Optional)</Label>
                  <Textarea 
                    id="contact-details" 
                    name="contact-details" 
                    defaultValue={user.contact_details || ''} 
                    placeholder="Social media handles, additional contact info..."
                    rows={3}
                  />
                </div>

                <div className="flex justify-end">
                  <Button type="submit" disabled={saving}>
                    {saving ? 'Saving...' : 'Save Changes'}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </div>
      </main>

      <Footer />
    </div>
  );
}
